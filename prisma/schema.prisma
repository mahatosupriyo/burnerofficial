datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String
  lessons     Lesson[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  published   Boolean  @default(false)
}

model Lesson {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  slug           String
  course         Course               @relation(fields: [courseId], references: [id])
  courseId       String               @db.ObjectId
  video          Video?
  usersCompleted UserLessonProgress[]
}

model Video {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  lesson            Lesson? @relation(fields: [lessonId], references: [id])
  lessonId          String? @unique @db.ObjectId
  owner             User    @relation(fields: [ownerId], references: [id])
  ownerId           String  @db.ObjectId
  uploadId          String  @unique
  publicPlaybackId  String?
  privatePlaybackId String?
  duration          Float?
  aspectRatio       String?
  status            String  @default("preparing")
  posterTime        Float?
}

model UserLessonProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String   @db.ObjectId
  completedAt DateTime @default(now())

  @@unique([userId, lessonId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  SUPERUSER
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  username           String?   @unique
  lastUsernameUpdate DateTime?
  lastNameUpdate     DateTime?
  lastEmailUpdate    DateTime?
  lastImageUpdate    DateTime?

  about           String?
  designation     String?
  lastupdateabout DateTime?
  location        String?
  accounts        Account[]
  sessions        Session[]
  verified        Boolean   @default(false)
  posts           Post[]
  role            UserRole  @default(USER)

  instagram String?
  x         String?
  behance   String?
  linkedin  String?
  dribbble  String?

  courses  Course[]
  videos   Video[]
  progress UserLessonProgress[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SitemapItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  label     String
  url       String
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}
