datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  SUPERUSER
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  username           String?   @unique
  lastUsernameUpdate DateTime?
  lastNameUpdate     DateTime?
  lastEmailUpdate    DateTime?
  accounts           Account[]
  sessions           Session[]
  verified           Boolean   @default(false)
  posts              Post[]
  role               UserRole  @default(USER)
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  caption   String?
  links     String[]
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SitemapItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  label     String
  url       String
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}
